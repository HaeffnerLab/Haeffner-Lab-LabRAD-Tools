# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ok', [dirname(__file__)])
        except ImportError:
            import _ok
            return _ok
        if fp is not None:
            try:
                _mod = imp.load_module('_ok', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ok = swig_import_helper()
    del swig_import_helper
else:
    import _ok
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class PLL22150(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLL22150, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLL22150, name)
    __repr__ = _swig_repr
    ClkSrc_Ref = _ok.PLL22150_ClkSrc_Ref
    ClkSrc_Div1ByN = _ok.PLL22150_ClkSrc_Div1ByN
    ClkSrc_Div1By2 = _ok.PLL22150_ClkSrc_Div1By2
    ClkSrc_Div1By3 = _ok.PLL22150_ClkSrc_Div1By3
    ClkSrc_Div2ByN = _ok.PLL22150_ClkSrc_Div2ByN
    ClkSrc_Div2By2 = _ok.PLL22150_ClkSrc_Div2By2
    ClkSrc_Div2By4 = _ok.PLL22150_ClkSrc_Div2By4
    DivSrc_Ref = _ok.PLL22150_DivSrc_Ref
    DivSrc_VCO = _ok.PLL22150_DivSrc_VCO
    def __init__(self): 
        this = _ok.new_PLL22150()
        try: self.this.append(this)
        except: self.this = this
    def SetCrystalLoad(self, *args): return _ok.PLL22150_SetCrystalLoad(self, *args)
    def SetReference(self, *args): return _ok.PLL22150_SetReference(self, *args)
    def GetReference(self): return _ok.PLL22150_GetReference(self)
    def SetVCOParameters(self, *args): return _ok.PLL22150_SetVCOParameters(self, *args)
    def GetVCOP(self): return _ok.PLL22150_GetVCOP(self)
    def GetVCOQ(self): return _ok.PLL22150_GetVCOQ(self)
    def GetVCOFrequency(self): return _ok.PLL22150_GetVCOFrequency(self)
    def SetDiv1(self, *args): return _ok.PLL22150_SetDiv1(self, *args)
    def SetDiv2(self, *args): return _ok.PLL22150_SetDiv2(self, *args)
    def GetDiv1Source(self): return _ok.PLL22150_GetDiv1Source(self)
    def GetDiv2Source(self): return _ok.PLL22150_GetDiv2Source(self)
    def GetDiv1Divider(self): return _ok.PLL22150_GetDiv1Divider(self)
    def GetDiv2Divider(self): return _ok.PLL22150_GetDiv2Divider(self)
    def SetOutputSource(self, *args): return _ok.PLL22150_SetOutputSource(self, *args)
    def SetOutputEnable(self, *args): return _ok.PLL22150_SetOutputEnable(self, *args)
    def GetOutputSource(self, *args): return _ok.PLL22150_GetOutputSource(self, *args)
    def GetOutputFrequency(self, *args): return _ok.PLL22150_GetOutputFrequency(self, *args)
    def IsOutputEnabled(self, *args): return _ok.PLL22150_IsOutputEnabled(self, *args)
    __swig_destroy__ = _ok.delete_PLL22150
    __del__ = lambda self : None;
PLL22150_swigregister = _ok.PLL22150_swigregister
PLL22150_swigregister(PLL22150)

class PLL22393(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLL22393, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLL22393, name)
    __repr__ = _swig_repr
    ClkSrc_Ref = _ok.PLL22393_ClkSrc_Ref
    ClkSrc_PLL0_0 = _ok.PLL22393_ClkSrc_PLL0_0
    ClkSrc_PLL0_180 = _ok.PLL22393_ClkSrc_PLL0_180
    ClkSrc_PLL1_0 = _ok.PLL22393_ClkSrc_PLL1_0
    ClkSrc_PLL1_180 = _ok.PLL22393_ClkSrc_PLL1_180
    ClkSrc_PLL2_0 = _ok.PLL22393_ClkSrc_PLL2_0
    ClkSrc_PLL2_180 = _ok.PLL22393_ClkSrc_PLL2_180
    def __init__(self): 
        this = _ok.new_PLL22393()
        try: self.this.append(this)
        except: self.this = this
    def SetCrystalLoad(self, *args): return _ok.PLL22393_SetCrystalLoad(self, *args)
    def SetReference(self, *args): return _ok.PLL22393_SetReference(self, *args)
    def SetPLLParameters(self, *args): return _ok.PLL22393_SetPLLParameters(self, *args)
    def SetPLLLF(self, *args): return _ok.PLL22393_SetPLLLF(self, *args)
    def SetOutputDivider(self, *args): return _ok.PLL22393_SetOutputDivider(self, *args)
    def SetOutputSource(self, *args): return _ok.PLL22393_SetOutputSource(self, *args)
    def SetOutputEnable(self, *args): return _ok.PLL22393_SetOutputEnable(self, *args)
    def GetReference(self): return _ok.PLL22393_GetReference(self)
    def GetPLLP(self, *args): return _ok.PLL22393_GetPLLP(self, *args)
    def GetPLLQ(self, *args): return _ok.PLL22393_GetPLLQ(self, *args)
    def GetPLLFrequency(self, *args): return _ok.PLL22393_GetPLLFrequency(self, *args)
    def GetOutputDivider(self, *args): return _ok.PLL22393_GetOutputDivider(self, *args)
    def GetOutputSource(self, *args): return _ok.PLL22393_GetOutputSource(self, *args)
    def GetOutputFrequency(self, *args): return _ok.PLL22393_GetOutputFrequency(self, *args)
    def IsOutputEnabled(self, *args): return _ok.PLL22393_IsOutputEnabled(self, *args)
    def IsPLLEnabled(self, *args): return _ok.PLL22393_IsPLLEnabled(self, *args)
    __swig_destroy__ = _ok.delete_PLL22393
    __del__ = lambda self : None;
PLL22393_swigregister = _ok.PLL22393_swigregister
PLL22393_swigregister(PLL22393)

class FrontPanel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrontPanel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrontPanel, name)
    __repr__ = _swig_repr
    brdUnknown = _ok.FrontPanel_brdUnknown
    brdXEM3001v1 = _ok.FrontPanel_brdXEM3001v1
    brdXEM3001v2 = _ok.FrontPanel_brdXEM3001v2
    brdXEM3010 = _ok.FrontPanel_brdXEM3010
    brdXEM3005 = _ok.FrontPanel_brdXEM3005
    brdXEM3001CL = _ok.FrontPanel_brdXEM3001CL
    brdXEM3020 = _ok.FrontPanel_brdXEM3020
    brdXEM3050 = _ok.FrontPanel_brdXEM3050
    brdXEM9002 = _ok.FrontPanel_brdXEM9002
    brdXEM3001RB = _ok.FrontPanel_brdXEM3001RB
    brdXEM5010 = _ok.FrontPanel_brdXEM5010
    brdXEM6110LX45 = _ok.FrontPanel_brdXEM6110LX45
    brdXEM6110LX150 = _ok.FrontPanel_brdXEM6110LX150
    brdXEM6001 = _ok.FrontPanel_brdXEM6001
    brdXEM6010LX45 = _ok.FrontPanel_brdXEM6010LX45
    brdXEM6010LX150 = _ok.FrontPanel_brdXEM6010LX150
    brdXEM6006LX9 = _ok.FrontPanel_brdXEM6006LX9
    brdXEM6006LX16 = _ok.FrontPanel_brdXEM6006LX16
    brdXEM6006LX25 = _ok.FrontPanel_brdXEM6006LX25
    brdXEM5010LX110 = _ok.FrontPanel_brdXEM5010LX110
    NoError = _ok.FrontPanel_NoError
    Failed = _ok.FrontPanel_Failed
    Timeout = _ok.FrontPanel_Timeout
    DoneNotHigh = _ok.FrontPanel_DoneNotHigh
    TransferError = _ok.FrontPanel_TransferError
    CommunicationError = _ok.FrontPanel_CommunicationError
    InvalidBitstream = _ok.FrontPanel_InvalidBitstream
    FileError = _ok.FrontPanel_FileError
    DeviceNotOpen = _ok.FrontPanel_DeviceNotOpen
    InvalidEndpoint = _ok.FrontPanel_InvalidEndpoint
    InvalidBlockSize = _ok.FrontPanel_InvalidBlockSize
    I2CRestrictedAddress = _ok.FrontPanel_I2CRestrictedAddress
    I2CBitError = _ok.FrontPanel_I2CBitError
    I2CNack = _ok.FrontPanel_I2CNack
    I2CUnknownStatus = _ok.FrontPanel_I2CUnknownStatus
    UnsupportedFeature = _ok.FrontPanel_UnsupportedFeature
    FIFOUnderflow = _ok.FrontPanel_FIFOUnderflow
    FIFOOverflow = _ok.FrontPanel_FIFOOverflow
    DataAlignmentError = _ok.FrontPanel_DataAlignmentError
    def __init__(self): 
        this = _ok.new_FrontPanel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ok.delete_FrontPanel
    __del__ = lambda self : None;
    def ActivateTriggerIn(self, *args): return _ok.FrontPanel_ActivateTriggerIn(self, *args)
    def ConfigureFPGA(self, *args): return _ok.FrontPanel_ConfigureFPGA(self, *args)
    def EnableAsynchronousTransfers(self, *args): return _ok.FrontPanel_EnableAsynchronousTransfers(self, *args)
    def GetBoardModel(self): return _ok.FrontPanel_GetBoardModel(self)
    def GetBoardModelString(self, *args): return _ok.FrontPanel_GetBoardModelString(self, *args)
    def GetDeviceCount(self): return _ok.FrontPanel_GetDeviceCount(self)
    def GetDeviceID(self): return _ok.FrontPanel_GetDeviceID(self)
    def GetDeviceListModel(self, *args): return _ok.FrontPanel_GetDeviceListModel(self, *args)
    def GetDeviceListSerial(self, *args): return _ok.FrontPanel_GetDeviceListSerial(self, *args)
    def GetDeviceMajorVersion(self): return _ok.FrontPanel_GetDeviceMajorVersion(self)
    def GetDeviceMinorVersion(self): return _ok.FrontPanel_GetDeviceMinorVersion(self)
    def GetEepromPLL22150Configuration(self, *args): return _ok.FrontPanel_GetEepromPLL22150Configuration(self, *args)
    def GetEepromPLL22393Configuration(self, *args): return _ok.FrontPanel_GetEepromPLL22393Configuration(self, *args)
    def GetPLL22150Configuration(self, *args): return _ok.FrontPanel_GetPLL22150Configuration(self, *args)
    def GetPLL22393Configuration(self, *args): return _ok.FrontPanel_GetPLL22393Configuration(self, *args)
    def GetSerialNumber(self): return _ok.FrontPanel_GetSerialNumber(self)
    def GetWireOutValue(self, *args): return _ok.FrontPanel_GetWireOutValue(self, *args)
    def GetHostInterfaceWidth(self): return _ok.FrontPanel_GetHostInterfaceWidth(self)
    def IsHighSpeed(self): return _ok.FrontPanel_IsHighSpeed(self)
    def IsFrontPanel3Supported(self): return _ok.FrontPanel_IsFrontPanel3Supported(self)
    def IsFrontPanelEnabled(self): return _ok.FrontPanel_IsFrontPanelEnabled(self)
    def IsOpen(self): return _ok.FrontPanel_IsOpen(self)
    def IsTriggered(self, *args): return _ok.FrontPanel_IsTriggered(self, *args)
    def LoadDefaultPLLConfiguration(self): return _ok.FrontPanel_LoadDefaultPLLConfiguration(self)
    def OpenBySerial(self, *args): return _ok.FrontPanel_OpenBySerial(self, *args)
    def ResetFPGA(self): return _ok.FrontPanel_ResetFPGA(self)
    def SetBTPipePollingInterval(self, *args): return _ok.FrontPanel_SetBTPipePollingInterval(self, *args)
    def SetDeviceID(self, *args): return _ok.FrontPanel_SetDeviceID(self, *args)
    def SetEepromPLL22150Configuration(self, *args): return _ok.FrontPanel_SetEepromPLL22150Configuration(self, *args)
    def SetEepromPLL22393Configuration(self, *args): return _ok.FrontPanel_SetEepromPLL22393Configuration(self, *args)
    def SetPLL22150Configuration(self, *args): return _ok.FrontPanel_SetPLL22150Configuration(self, *args)
    def SetPLL22393Configuration(self, *args): return _ok.FrontPanel_SetPLL22393Configuration(self, *args)
    def SetTimeout(self, *args): return _ok.FrontPanel_SetTimeout(self, *args)
    def SetWireInValue(self, *args): return _ok.FrontPanel_SetWireInValue(self, *args)
    def UpdateTriggerOuts(self): return _ok.FrontPanel_UpdateTriggerOuts(self)
    def UpdateWireIns(self): return _ok.FrontPanel_UpdateWireIns(self)
    def UpdateWireOuts(self): return _ok.FrontPanel_UpdateWireOuts(self)
    def WriteToPipeIn(self, *args): return _ok.FrontPanel_WriteToPipeIn(self, *args)
    def ReadFromPipeOut(self, *args): return _ok.FrontPanel_ReadFromPipeOut(self, *args)
    def WriteToBlockPipeIn(self, *args): return _ok.FrontPanel_WriteToBlockPipeIn(self, *args)
    def ReadFromBlockPipeOut(self, *args): return _ok.FrontPanel_ReadFromBlockPipeOut(self, *args)
    def WriteToPipeInThr(self, *args): return _ok.FrontPanel_WriteToPipeInThr(self, *args)
    def ReadFromPipeOutThr(self, *args): return _ok.FrontPanel_ReadFromPipeOutThr(self, *args)
    def WriteToBlockPipeInThr(self, *args): return _ok.FrontPanel_WriteToBlockPipeInThr(self, *args)
    def ReadFromBlockPipeOutThr(self, *args): return _ok.FrontPanel_ReadFromBlockPipeOutThr(self, *args)
    def ReadI2C(self, *args): return _ok.FrontPanel_ReadI2C(self, *args)
    def WriteI2C(self, *args): return _ok.FrontPanel_WriteI2C(self, *args)
FrontPanel_swigregister = _ok.FrontPanel_swigregister
FrontPanel_swigregister(FrontPanel)

# This file is compatible with both classic and new-style classes.


